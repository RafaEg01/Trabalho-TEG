#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>


#define MAX_LINE_LENGTH 1024

typedef struct flower{
    float sepLength;
    float sepWidth;
    float petLength;
    float petWidth;
} flower;

void distancia_euclideana();
void achamaioremenor(float *maior, float *menor, float matriz[150][150]);
void distancia_normalizada(float *maior, float *menor);
void printa_matriz(float matriz[150][150]);

flower flores[150];
int matriz_adjacencia[150][150] = {0};
float matriz_distancias[150][150] = {0};
float matriz_normalizada[150][150] = {0};

int main() {
    //abertura e leitura arquivo
    int i = -1;
    float demaior = 0, demenor = 0, denmaior = 0, denmenor = 0;
    
        FILE *file = fopen("IrisDataset.csv", "r");
        if (file == NULL) {
            printf("Erro ao abrir o arquivo.\n");
            return 1;
        }

        char line[MAX_LINE_LENGTH];
        fgets(line, sizeof(line), file);
        while (fgets(line, sizeof(line), file)) {
            i++;
            flower f;
            char *token;
            token = strtok(line, ",");
            token = strtok(NULL, ",");

            if (token != NULL) {
                f.sepLength = atof(token);  // Convert string to float
            }
            
            token = strtok(NULL, ",");
            if (token != NULL){
            f.sepWidth = atof(token);
            }
            
            token = strtok(NULL, ",");
            if (token != NULL) {
                f.petLength = atof(token);
            }

            token = strtok(NULL, ",");
            if (token != NULL) {
                f.petWidth = atof(token);
            }
            flores[i] = f;
        }
    
    distancia_euclideana();
    achamaioremenor(&demaior, &demenor, matriz_distancias);
    distancia_normalizada(&demaior, &demenor);
    achamaioremenor(&denmaior, &denmenor, matriz_normalizada);
    printf("----------Matriz de distancias--------\n");
    printa_matriz(matriz_distancias);
    printf("\n--------Matriz Normalizada--------\n");
    printa_matriz(matriz_normalizada);
    printf("\n-----------------------------------\n");
    for(int i = 0; i < 149; i++){
        for(int j = i+1; j < 150; j++){
            if(matriz_normalizada[i][j] <= 0.3){
                matriz_adjacencia[i][j] = 1; //tem relacao?
                matriz_adjacencia[j][i] = 1;
            }
        }
    } 

    printf("\n------Matriz de Adjacencia--------------\n");
    for(int i = 0; i < 150; i++){
         printf("\nLinha %i-- ", i);
        for(int j = 0; j < 150; j++){
            printf("%i ", matriz_adjacencia[i][j]);
        }
    }
        printf("\nDEmaior - %f\nDEmenor: %f\nDENmaior: %f\nDENmenor: %f\n", demaior, demenor, denmaior, denmenor);

        fclose(file);
        return 0;
}

void distancia_euclideana(){
    int i = 0, j = 0;
    for(i = 0; i < 149; i++){
        for(j = i+1; j < 150; j++){
            matriz_distancias[i][j] = sqrt(pow((flores[i].sepLength - flores[j].sepLength), 2) +
                                            pow((flores[i].sepWidth - flores[j].sepWidth), 2) +
                                            pow((flores[i].petLength - flores[j].petLength), 2) +
                                            pow((flores[i].petWidth - flores[j].petWidth), 2));
            matriz_distancias[j][i] = matriz_distancias[i][j];
        }
    }
}

void achamaioremenor(float *maior, float *menor, float matriz[150][150]){
    int i = 0, j = 0;

    *maior = matriz[0][1];
    *menor = matriz[0][1]; //elemento inicial e ir comparando
    for(i = 0; i < 149; i++){
        for(j = i+1; j < 150; j++){
            if(matriz[i][j] > *maior){
                *maior = matriz[i][j];
            }
            if(matriz[i][j] < *menor){
                *menor = matriz[i][j];
            }
        }
    }
}

void distancia_normalizada(float *maior, float *menor){
    achamaioremenor(maior, menor, matriz_distancias);

    for(int i = 0; i < 149; i++){
        for(int j = i+1; j < 150; j++){
            if(i != j){
                matriz_normalizada[i][j] = (matriz_distancias[i][j] - *menor) / (*maior - *menor);
                matriz_normalizada[j][i] = matriz_normalizada[i][j];
            }
        }
    }
}

void printa_matriz(float matriz[150][150]){
    for(int i = 0; i < 150; i++){
        printf("%i -> ", i);
        for(int j = 0; j < 150; j++){
            printf("%.2f ", matriz[i][j]);
        }
        printf("\n");
    }
}
